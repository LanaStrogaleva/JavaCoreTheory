package org.example.collections;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
/**
 * Класс <b>CircularArray&lt;T&gt;</b> представляет собой пример реализации кастомной коллекции с использованием дженериков.
 * Эта коллекция имеет особенность в том, что итерация по ней происходит бесконечно, при условии, что внутренний массив не пустой.
 * Таким образом, метод hasNext всегда возвращает true, если коллекция содержит элементы. Для ограничения итерации
 * по такой коллекции необходимо использовать внешний счётчик.
 *
 * <p>Класс параметризован типом &lt;T&gt, что позволяет использовать его с любыми типами данных.
 * Это демонстрирует применение дженериков на уровне классов и методов, обеспечивая гибкость и повторное использование кода.</p>
 *
 * <p>Во время написания кода тип данных, с которым будет создаваться коллекция, неизвестен.
 * Тип определяется в клиентском коде при создании экземпляра коллекции, и Java корректно обрабатывает его во время выполнения.</p>
 *
 * <p>Класс включает внутренний класс CircularArrayIterator, который реализует интерфейс Iterator&lt;T&gt;
 * для обеспечения функциональности итерации. Это делает CircularArray совместимым с циклами for-each и
 * другими стандартными механизмами итерации в Java.</p>
 *
 * <p>Пример использования в классе DemoForCustomIterable иллюстрирует создание и итерацию по CircularArray
 * с использованием внешнего счётчика для ограничения количества итераций.</p>
 *
 * @param <T> Тип элементов, хранящихся в коллекции.
 */
public class CircularArray<T> implements Iterable<T>{
    @Override
    public Iterator<T> iterator() {
        return null;
    }

    @Override
    public void forEach(Consumer<? super T> action) {
        Iterable.super.forEach(action);
    }

    @Override
    public Spliterator<T> spliterator() {
        return Iterable.super.spliterator();
    }
}
