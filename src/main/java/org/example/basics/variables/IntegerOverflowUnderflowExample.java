package org.example.basics.variables;
/**
 * Класс <b>IntegerOverflowUnderflowExample</b> демонстрирует пример переполнения и недополнения (underflow)
 * для типа данных Integer в Java. В классе рассматриваются максимальное и минимальное значения, которые может
 * принимать тип int, и показывается, что происходит при переполнении и недополнении этих значений.
 * <p>
 * Основной фокус класса – продемонстрировать, как арифметические операции могут приводить к неожиданным
 * результатам из-за ограничений размера типов данных. Примеры включают добавление 1 к максимальному значению int
 * (что приводит к переполнению) и вычитание 1 из минимального значения int (что приводит к недополнению).
 * <p>
 * Этот класс является важным ресурсом для понимания ограничений числовых типов данных в Java и последствий,
 * которые могут возникать при работе с большими или маленькими значениями.
 */
public class IntegerOverflowUnderflowExample {
    public static void main(String[] args) {
        // Максимальное значение типа int
        int maxInt = Integer.MAX_VALUE;
        System.out.println("Максимальное значение int: " + maxInt);

        // Переполнение: добавляем 1 к максимальному значению int
        int overflow = maxInt + 1;
        System.out.println("После переполнения (maxInt + 1): " + overflow);

        // Минимальное значение типа int
        int minInt = Integer.MIN_VALUE;
        System.out.println("Минимальное значение int: " + minInt);

        // Недополнение: вычитаем 1 из минимального значения int
        int underflow = minInt - 1;
        System.out.println("После недополнения (minInt - 1): " + underflow);
    }
}
